# -*- coding: utf-8 -*-
"""Netfilx-stock-price-predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19JMKCjvKNtY7EjTzfOzRdWiCUXZYSAZu
"""

import numpy as np
import pandas as pd

df = pd.read_csv(r"/content/NFLX.csv")
df.info()

from datetime import datetime
x = df['Date']
df['Date'] = df['Date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))
df.info()

df = df.drop(['Adj Close'], axis=1)
df

x_train = df.drop(labels = 'Close',axis = 1 )[df['Date'].dt.year < 2021]
x_test = df.drop(labels = 'Close',axis = 1 )[df['Date'].dt.year >= 2021]


y_train = df[df['Date'].dt.year < 2021]['Close'].values
y_test = df[df['Date'].dt.year >= 2021]['Close'].values

x_train.drop(labels = 'Date',axis = True , inplace = True)
x_test.drop(labels = 'Date',axis = True , inplace = True)

print(x_test)
print(x_train)

# !pip  install scikit-learn
from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression()
linear_regressor.fit(x_train,y_train)
y_pred_lr = linear_regressor.predict(x_test)
# y_pred_lr
from sklearn.metrics import mean_absolute_error as mae , mean_squared_error as mse
print("----------Linear Reggression- Model Evaluvation-----------")
print("Mean Absolute Error (MAE) : {}".format(mae(y_test,y_pred_lr)))
print("Mean Squared Error (MSE) : {}".format(mse(y_test,y_pred_lr)))
print("Root MeanSquared Error (RMSE) : {}".format(np.sqrt(mse(y_test,y_pred_lr))))
print(linear_regressor.score(x_test,y_test))
print(linear_regressor.score(x_train,y_train))

from sklearn.tree import DecisionTreeRegressor
Decision_Regressor = DecisionTreeRegressor()
Decision_Regressor.fit(x_train,y_train)
y_pred_dr = Decision_Regressor.predict(x_test)
# y_pred_dr
print("----------Decision Tree Regressor- Model Evaluvation-----------")
print("Mean Absolute Error (MAE) : {}".format(mae(y_test,y_pred_dr)))
print("Mean Squared Error (MSE) : {}".format(mse(y_test,y_pred_dr)))
print("Root MeanSquared Error (RMSE) : {}".format(np.sqrt(mse(y_test,y_pred_dr))))
print(Decision_Regressor.score(x_test,y_test))
print(Decision_Regressor.score(x_train,y_train))

from sklearn.ensemble import RandomForestRegressor
Random_Regressor = RandomForestRegressor()
Random_Regressor.fit(x_train,y_train)
y_pred_rr = Decision_Regressor.predict(x_test)
y_pred_rr
print("----------Random Forest Regressor - Model Evaluvation-----------")
print("Mean Absolute Error (MAE) : {}".format(mae(y_test,y_pred_rr)))
print("Mean Squared Error (MSE) : {}".format(mse(y_test,y_pred_rr)))
print("Root MeanSquared Error (RMSE) : {}".format(np.sqrt(mse(y_test,y_pred_rr))))
print(Random_Regressor.score(x_test,y_test))
print(Random_Regressor.score(x_train,y_train))

from sklearn.ensemble import AdaBoostRegressor
Ada_Regressor =AdaBoostRegressor(base_estimator=linear_regressor, n_estimators=100, learning_rate=25, random_state = 42)
Ada_Regressor.fit(x_train,y_train)
y_pred_ad = Ada_Regressor.predict(x_test)
y_pred_ad
print("----------Ada Boost Regressor- Model Evaluvation-----------")
print("Mean Absolute Error (MAE) : {}".format(mae(y_test,y_pred_ad)))
print("Mean Squared Error (MSE) : {}".format(mse(y_test,y_pred_ad)))
print("Root MeanSquared Error (RMSE) : {}".format(np.sqrt(mse(y_test,y_pred_ad))))
print(Ada_Regressor.score(x_test,y_test))
print(Ada_Regressor.score(x_train,y_train))

def predict_close(Open = 50.0,	High = 100.0, Low = 0.0, Volume = 4444400):
  temp_array = [Open,High,Low,Volume]
  temp_array = np.array(temp_array).reshape(1,-1)
  return linear_regressor.predict(temp_array)[0]

opening_price = float(input("Enter the opening value of the stock : "))
low = float(input("Enter the lowest value of the stock : "))
high = float(input("Enter the higest value of the stock : "))
volume = int(input("Enter the volume of the stock available : "))

closing_value = predict_close(opening_price,high,low,volume)
print('Closing value of the stock is ',closing_value)

import pickle
with open('linear_regression_model.pkl', 'wb') as file:
  pickle.dump(linear_regressor, file)

print(type(linear_regressor))

